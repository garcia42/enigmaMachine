package enigma;

/** Class that represents a complete enigma machine.
 *  @author Jesus Garcia
 */

public final class Machine {

    /** this is a class variable for THIS . RIGHT ROTORS. */
    private Rotor right;
    /** this is a class variable for THIS . MIDDLE ROTORS. */
    private Rotor middle;
    /** this is a class variable for THIS . LEFT ROTORS. */
    private Rotor left;
    /** this is a class variable for THIS IS A ROTOR ROTORS. */
    private Rotor fixed;
    /** this is a class variable for REFLECTOR. */
    private Rotor reflector;
    /** ROTORARRAY ROTORARRAY[] PRIVATE STATIC VARIABLE.
    TRYING TO SET IT HERE. */
    private Rotor[] rotorArray;
    /** this is a GETTER METHOD FOR RIGHT, RETURNS A ROTOR. */
    Rotor getRight() {
        return right;
    }
    /** THIS IS A GETTER METHOD FOR LEFT, RETURNS A ROTOR. */
    Rotor getLeft() {
        return left;
    }
    /** THIS IS A GETTER METHOD FOR MIDDLE, RETURNS A ROTOR. */
    Rotor getMiddle() {
        return middle;
    }
    /** THIS IS A GETTER METHOD FOR REFLECTOR, RETURNS A ROTOR. */
    Rotor getReflector() {
        return reflector;
    }
    /** THIS IS A GETTER METHOD FOR FIXED, RETURNS A ROTOR. */
    Rotor getFixed() {
        return fixed;
    }

    /** Set my rotors to (from left to right) ROTORS.  Initially, the rotor.
    *settings are all 'A' sets ROTORS, a ROTOR[], to the rotors in MACHINE.*/
    void replaceRotors(Rotor[] rotors) {
        this.reflector = rotors[0];
        this.fixed = rotors[1];
        this.left = rotors[2];
        this.middle = rotors[3];
        this.right = rotors[4];
    }

    /** Set my rotors according to SETTING, which must be a string of four
     *  upper-case letters. The first letter refers to the leftmost
     *  rotor setting.  */
    void setRotors(String setting) {
        this.fixed.setSetting(Rotor.toIndex(setting.charAt(0)));
        this.left.setSetting(Rotor.toIndex(setting.charAt(1)));
        this.middle.setSetting(Rotor.toIndex(setting.charAt(2)));
        this.right.setSetting(Rotor.toIndex(setting.charAt(3)));
	rotorArray =
	{this.reflector, this.fixed, this.left, this.middle, this.right};
    }

    /** Returns the encoding/decoding of MSG, updating the state of
     *  the rotors accordingly. */
    String convert(String msg) {
        String msg2 = msg.replace(" ", "");
        String msg3 = msg2.toUpperCase();
        Rotor[] rotorArray =
        {this.reflector, this.fixed, this.left, this.middle, this.right};
        char[] decoded =new char[msg3.length()];
        char[] msgary = msg3.toCharArray();
        int i;
        for (i = 0; i < msgary.length; i++) {
            if (middle.atNotch()) {
                rotorArray[2].advanceSetting();
                rotorArray[3].advanceSetting();
            }
            if (rotorArray[4].atNotch()) {
                rotorArray[3].advanceSetting();
            }
            rotorArray[4].advanceSetting();
            int current = Rotor.toIndex(msgary[i]);
            for (int backward = 4; backward > -1; backward--) {
                current = rotorArray[backward].convertForward(current);

                System.out.println(rotorArray[backward].getSetting());
            }
            for (int forward = 1; forward < 5; forward++) {
                current = rotorArray[forward].convertBackward(current);

                /* System.out.println(rotorArray[forward].self2get()); */
        }
            decoded[i] = Rotor.toLetter(current);
            System.out.println(decoded);
        }
        String s = new String(decoded);
        return s;
    }
}
